import numpy as np
import matplotlib.pyplot as plt
from qutip import basis, tensor, sigmaz, sigmax, sigmam, mesolve, identity
from scipy.optimize import curve_fit

# System parameters
fq1 = 3.2  # GHz, Qubit 1 frequency
fq2 = 3.35  # GHz, Qubit 2 frequency
fTLS = 3.2  # GHz, TLS frequency (resonant with Qubit 1)
J_TLS = 0.05  # GHz, Coupling strength between Qubit 1 and TLS

# Relaxation and dephasing rates
gamma1_q1 = 1/20  # Relaxation rate for qubit 1 (T1 ~ 20 μs)
gamma2_q1 = 1/15  # Dephasing rate for qubit 1 (T2 ~ 15 μs)
gamma1_q2 = 1/25  # Relaxation rate for qubit 2 (T1 ~ 25 μs)
gamma2_q2 = 1/18  # Dephasing rate for qubit 2 (T2 ~ 18 μs)
gamma1_TLS = 1/5  # Relaxation rate for TLS
gamma2_TLS = 1/3  # Dephasing rate for TLS

# Time parameters
tlist = np.linspace(0, 50, 500)  # Time points in μs

# Define operators for different configurations
def setup_operators(use_zz_coupling=True):
    # ZZ coupling strength
    Jzz = 0.01 if use_zz_coupling else 0.0
    
    # Define operators in combined Hilbert space (Qubit 1, Qubit 2, TLS)
    sz_q1 = tensor(sigmaz(), identity(2), identity(2))
    sz_q2 = tensor(identity(2), sigmaz(), identity(2))
    sz_tls = tensor(identity(2), identity(2), sigmaz())
    
    sx_q1 = tensor(sigmax(), identity(2), identity(2))
    sx_q2 = tensor(identity(2), sigmax(), identity(2))
    
    sm_q1 = tensor(sigmam(), identity(2), identity(2))
    sm_q2 = tensor(identity(2), sigmam(), identity(2))
    sm_tls = tensor(identity(2), identity(2), sigmam())
    
    # Construct Hamiltonian components
    H_Q1 = 2*np.pi * fq1/2 * sz_q1
    H_Q2 = 2*np.pi * fq2/2 * sz_q2
    H_TLS = 2*np.pi * fTLS/2 * sz_tls
    H_ZZ = 2*np.pi * Jzz * sz_q1 * sz_q2
    H_Q1_TLS = 2*np.pi * J_TLS * sz_q1 * sz_tls
    
    # Total Hamiltonian
    H = H_Q1 + H_Q2 + H_ZZ + H_TLS + H_Q1_TLS
    
    # Collapse operators
    c_ops = []
    c_ops.append(np.sqrt(gamma1_q1) * sm_q1)  # T1 for qubit 1
    c_ops.append(np.sqrt(gamma2_q1/2) * sz_q1)  # Pure dephasing for qubit 1
    c_ops.append(np.sqrt(gamma1_q2) * sm_q2)  # T1 for qubit 2
    c_ops.append(np.sqrt(gamma2_q2/2) * sz_q2)  # Pure dephasing for qubit 2
    c_ops.append(np.sqrt(gamma1_TLS) * sm_tls)  # T1 for TLS
    c_ops.append(np.sqrt(gamma2_TLS/2) * sz_tls)  # Pure dephasing for TLS
    
    return H, c_ops, sz_q1, sz_q2, sx_q1, sx_q2, sm_q1, sm_q2

# Fitting function for T1 decay
def exp_decay(t, a, T1, c):
    return a * np.exp(-t / T1) + c

# --- T1 MEASUREMENTS ---

# 1. Individual Readout (Jzz = 0)
H_ind, c_ops_ind, sz_q1_ind, sz_q2_ind, sx_q1_ind, sx_q2_ind, sm_q1_ind, sm_q2_ind = setup_operators(use_zz_coupling=False)

# T1 measurement for Qubit 1 (individual)
psi0_q1_ind = tensor(basis(2, 1), basis(2, 0), basis(2, 0))  # |1⟩|0⟩|0⟩
result_q1_t1_ind = mesolve(H_ind, psi0_q1_ind, tlist, c_ops_ind, [sz_q1_ind])
pop_q1_ind = (1 - result_q1_t1_ind.expect[0]) / 2  # Convert <σz> to |1⟩ population

# Fit T1 for Qubit 1 (individual)
popt_q1_t1_ind, _ = curve_fit(exp_decay, tlist, pop_q1_ind, p0=[1.0, 20, 0])
T1_q1_ind = popt_q1_t1_ind[1]

# T1 measurement for Qubit 2 (individual)
psi0_q2_ind = tensor(basis(2, 0), basis(2, 1), basis(2, 0))  # |0⟩|1⟩|0⟩
result_q2_t1_ind = mesolve(H_ind, psi0_q2_ind, tlist, c_ops_ind, [sz_q2_ind])
pop_q2_ind = (1 - result_q2_t1_ind.expect[0]) / 2  # Convert <σz> to |1⟩ population

# Fit T1 for Qubit 2 (individual)
popt_q2_t1_ind, _ = curve_fit(exp_decay, tlist, pop_q2_ind, p0=[1.0, 25, 0])
T1_q2_ind = popt_q2_t1_ind[1]

# 2. Multiplexed Readout (Jzz ≠ 0)
H_mult, c_ops_mult, sz_q1_mult, sz_q2_mult, sx_q1_mult, sx_q2_mult, sm_q1_mult, sm_q2_mult = setup_operators(use_zz_coupling=True)

# T1 measurement for Qubit 1 (multiplexed)
psi0_q1_mult = tensor(basis(2, 1), basis(2, 0), basis(2, 0))  # |1⟩|0⟩|0⟩
result_q1_t1_mult = mesolve(H_mult, psi0_q1_mult, tlist, c_ops_mult, [sz_q1_mult])
pop_q1_mult = (1 - result_q1_t1_mult.expect[0]) / 2

# Fit T1 for Qubit 1 (multiplexed)
popt_q1_t1_mult, _ = curve_fit(exp_decay, tlist, pop_q1_mult, p0=[1.0, 20, 0])
T1_q1_mult = popt_q1_t1_mult[1]

# T1 measurement for Qubit 2 (multiplexed)
psi0_q2_mult = tensor(basis(2, 0), basis(2, 1), basis(2, 0))  # |0⟩|1⟩|0⟩
result_q2_t1_mult = mesolve(H_mult, psi0_q2_mult, tlist, c_ops_mult, [sz_q2_mult])
pop_q2_mult = (1 - result_q2_t1_mult.expect[0]) / 2

# Fit T1 for Qubit 2 (multiplexed)
popt_q2_t1_mult, _ = curve_fit(exp_decay, tlist, pop_q2_mult, p0=[1.0, 25, 0])
T1_q2_mult = popt_q2_t1_mult[1]

# --- T2 MEASUREMENTS ---

# 1. Individual Readout (Jzz = 0)
# T2 for Qubit 1 (individual)
psi0_q1_t2_ind = tensor((basis(2, 0) + basis(2, 1)).unit(), basis(2, 0), basis(2, 0))  # |+⟩|0⟩|0⟩
result_q1_t2_ind = mesolve(H_ind, psi0_q1_t2_ind, tlist, c_ops_ind, [sx_q1_ind])
coherence_q1_ind = np.abs(result_q1_t2_ind.expect[0])

# Fit T2 for Qubit 1 (individual)
popt_q1_t2_ind, _ = curve_fit(exp_decay, tlist, coherence_q1_ind, p0=[1.0, 15, 0])
T2_q1_ind = popt_q1_t2_ind[1]

# T2 for Qubit 2 (individual)
psi0_q2_t2_ind = tensor(basis(2, 0), (basis(2, 0) + basis(2, 1)).unit(), basis(2, 0))  # |0⟩|+⟩|0⟩
result_q2_t2_ind = mesolve(H_ind, psi0_q2_t2_ind, tlist, c_ops_ind, [sx_q2_ind])
coherence_q2_ind = np.abs(result_q2_t2_ind.expect[0])

# Fit T2 for Qubit 2 (individual)
popt_q2_t2_ind, _ = curve_fit(exp_decay, tlist, coherence_q2_ind, p0=[1.0, 18, 0])
T2_q2_ind = popt_q2_t2_ind[1]

# 2. Multiplexed Readout (Jzz ≠ 0)
# T2 for Qubit 1 (multiplexed)
psi0_q1_t2_mult = tensor((basis(2, 0) + basis(2, 1)).unit(), basis(2, 0), basis(2, 0))  # |+⟩|0⟩|0⟩
result_q1_t2_mult = mesolve(H_mult, psi0_q1_t2_mult, tlist, c_ops_mult, [sx_q1_mult])
coherence_q1_mult = np.abs(result_q1_t2_mult.expect[0])

# Fit T2 for Qubit 1 (multiplexed)
popt_q1_t2_mult, _ = curve_fit(exp_decay, tlist, coherence_q1_mult, p0=[1.0, 15, 0])
T2_q1_mult = popt_q1_t2_mult[1]

# T2 for Qubit 2 (multiplexed)
psi0_q2_t2_mult = tensor(basis(2, 0), (basis(2, 0) + basis(2, 1)).unit(), basis(2, 0))  # |0⟩|+⟩|0⟩
result_q2_t2_mult = mesolve(H_mult, psi0_q2_t2_mult, tlist, c_ops_mult, [sx_q2_mult])
coherence_q2_mult = np.abs(result_q2_t2_mult.expect[0])

# Fit T2 for Qubit 2 (multiplexed)
popt_q2_t2_mult, _ = curve_fit(exp_decay, tlist, coherence_q2_mult, p0=[1.0, 18, 0])
T2_q2_mult = popt_q2_t2_mult[1]

# --- PLOTTING T1 RESULTS ---
plt.figure(figsize=(15, 10))

# Plot 1: T1 for Qubit 1 (Individual)
plt.subplot(2, 2, 1)
plt.plot(tlist, pop_q1_ind, 'bo', alpha=0.5, label='Data')
plt.plot(tlist, exp_decay(tlist, *popt_q1_t1_ind), 'r-', 
         label=f'Fit: T1 = {T1_q1_ind:.2f} μs')
plt.title('T1 - Qubit 1 (Individual Readout, Jzz = 0)')
plt.xlabel('Time (μs)')
plt.ylabel('Population |1⟩')
plt.legend()
plt.grid(True)

# Plot 2: T1 for Qubit 2 (Individual)
plt.subplot(2, 2, 2)
plt.plot(tlist, pop_q2_ind, 'bo', alpha=0.5, label='Data')
plt.plot(tlist, exp_decay(tlist, *popt_q2_t1_ind), 'r-', 
         label=f'Fit: T1 = {T1_q2_ind:.2f} μs')
plt.title('T1 - Qubit 2 (Individual Readout, Jzz = 0)')
plt.xlabel('Time (μs)')
plt.ylabel('Population |1⟩')
plt.legend()
plt.grid(True)

# Plot 3: T1 for Qubit 1 (Multiplexed)
plt.subplot(2, 2, 3)
plt.plot(tlist, pop_q1_mult, 'bo', alpha=0.5, label='Data')
plt.plot(tlist, exp_decay(tlist, *popt_q1_t1_mult), 'r-', 
         label=f'Fit: T1 = {T1_q1_mult:.2f} μs')
plt.title('T1 - Qubit 1 (Multiplexed Readout, Jzz = 0.01)')
plt.xlabel('Time (μs)')
plt.ylabel('Population |1⟩')
plt.legend()
plt.grid(True)

# Plot 4: T1 for Qubit 2 (Multiplexed)
plt.subplot(2, 2, 4)
plt.plot(tlist, pop_q2_mult, 'bo', alpha=0.5, label='Data')
plt.plot(tlist, exp_decay(tlist, *popt_q2_t1_mult), 'r-', 
         label=f'Fit: T1 = {T1_q2_mult:.2f} μs')
plt.title('T1 - Qubit 2 (Multiplexed Readout, Jzz = 0.01)')
plt.xlabel('Time (μs)')
plt.ylabel('Population |1⟩')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.savefig('T1_plots.png')
plt.show()

# --- PLOTTING T2 RESULTS ---
plt.figure(figsize=(15, 10))

# Plot 1: T2 for Qubit 1 (Individual)
plt.subplot(2, 2, 1)
plt.plot(tlist, coherence_q1_ind, 'bo', alpha=0.5, label='Data')
plt.plot(tlist, exp_decay(tlist, *popt_q1_t2_ind), 'r-', 
         label=f'Fit: T2 = {T2_q1_ind:.2f} μs')
plt.title('T2 - Qubit 1 (Individual Readout, Jzz = 0)')
plt.xlabel('Time (μs)')
plt.ylabel('Coherence |⟨σx⟩|')
plt.legend()
plt.grid(True)

# Plot 2: T2 for Qubit 2 (Individual)
plt.subplot(2, 2, 2)
plt.plot(tlist, coherence_q2_ind, 'bo', alpha=0.5, label='Data')
plt.plot(tlist, exp_decay(tlist, *popt_q2_t2_ind), 'r-', 
         label=f'Fit: T2 = {T2_q2_ind:.2f} μs')
plt.title('T2 - Qubit 2 (Individual Readout, Jzz = 0)')
plt.xlabel('Time (μs)')
plt.ylabel('Coherence |⟨σx⟩|')
plt.legend()
plt.grid(True)

# Plot 3: T2 for Qubit 1 (Multiplexed)
plt.subplot(2, 2, 3)
plt.plot(tlist, coherence_q1_mult, 'bo', alpha=0.5, label='Data')
plt.plot(tlist, exp_decay(tlist, *popt_q1_t2_mult), 'r-', 
         label=f'Fit: T2 = {T2_q1_mult:.2f} μs')
plt.title('T2 - Qubit 1 (Multiplexed Readout, Jzz = 0.01)')
plt.xlabel('Time (μs)')
plt.ylabel('Coherence |⟨σx⟩|')
plt.legend()
plt.grid(True)

# Plot 4: T2 for Qubit 2 (Multiplexed)
plt.subplot(2, 2, 4)
plt.plot(tlist, coherence_q2_mult, 'bo', alpha=0.5, label='Data')
plt.plot(tlist, exp_decay(tlist, *popt_q2_t2_mult), 'r-', 
         label=f'Fit: T2 = {T2_q2_mult:.2f} μs')
plt.title('T2 - Qubit 2 (Multiplexed Readout, Jzz = 0.01)')
plt.xlabel('Time (μs)')
plt.ylabel('Coherence |⟨σx⟩|')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.savefig('T2_plots.png')
plt.show()

# Print results
print("T1 Measurements:")
print("----------------")
print("Individual Readout (Jzz = 0):")
print(f"Qubit 1: T1 = {T1_q1_ind:.2f} μs")
print(f"Qubit 2: T1 = {T1_q2_ind:.2f} μs")

print("\nMultiplexed Readout (Jzz = 0.01):")
print(f"Qubit 1: T1 = {T1_q1_mult:.2f} μs")
print(f"Qubit 2: T1 = {T1_q2_mult:.2f} μs")

print("\nT2 Measurements:")
print("----------------")
print("Individual Readout (Jzz = 0):")
print(f"Qubit 1: T2 = {T2_q1_ind:.2f} μs")
print(f"Qubit 2: T2 = {T2_q2_ind:.2f} μs")

print("\nMultiplexed Readout (Jzz = 0.01):")
print(f"Qubit 1: T2 = {T2_q1_mult:.2f} μs")
print(f"Qubit 2: T2 = {T2_q2_mult:.2f} μs")
